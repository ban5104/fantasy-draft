{
  "version": "1.0",
  "name": "dpscript-insights-pr-readiness",
  "description": "Comprehensive acceptance specification for fantasy football draft optimizer enhanced decision support features on feature/dpscript-insights branch",
  "generated_by": "spec-generator",
  "generated_at": "2025-01-25T12:00:00Z",
  "acceptance": [
    {
      "id": "golden-master-regression-protection",
      "type": "custom",
      "description": "Verify optimizer produces identical results to golden master baseline with 5000 simulations for regression protection",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python scripts/tests/test_golden_master.py compare",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "enhanced-decision-support-validation",
      "type": "unit",
      "description": "Validate all enhanced decision support features: epsilon-optimal plans, regret analysis, flexibility index, contingency trees",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python scripts/tests/test_optimizer.py",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "comprehensive-optimizer-integration-test",
      "type": "custom",
      "description": "Run full optimizer with enhanced features using stable mode (5000 simulations) to verify integration",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python scripts/dp_draft_optimizer_debug.py --mode stable --seed 42",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "epsilon-optimal-plans-functionality",
      "type": "custom",
      "description": "Verify epsilon-optimal plans menu shows multiple viable strategies within threshold",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python -c \"from scripts.dp_draft_optimizer_debug import get_epsilon_optimal_plans, load_and_merge_data, monte_carlo_survival_realistic, get_position_survival_matrix, SNAKE_PICKS; import numpy as np; np.random.seed(42); players = load_and_merge_data(); player_survival = monte_carlo_survival_realistic(players, 1000, export_simulation_data=False, data_source='espn', enhanced_stats=False); globals().update({'PLAYERS': players, 'SURVIVAL_PROBS': get_position_survival_matrix(players, player_survival)}); plans = get_epsilon_optimal_plans(); print(f'Found {len(plans)} epsilon-optimal plans'); assert len(plans) >= 1, 'Should find at least one plan'; print('✓ Epsilon-optimal plans working')\"",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "regret-analysis-computation",
      "type": "custom", 
      "description": "Verify pick regret analysis computes position alternatives with regret percentages",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python -c \"from scripts.dp_draft_optimizer_debug import compute_pick_regret, load_and_merge_data, monte_carlo_survival_realistic, get_position_survival_matrix; import numpy as np; np.random.seed(42); players = load_and_merge_data(); player_survival = monte_carlo_survival_realistic(players, 1000, export_simulation_data=False, data_source='espn', enhanced_stats=False); globals().update({'PLAYERS': players, 'SURVIVAL_PROBS': get_position_survival_matrix(players, player_survival)}); regret = compute_pick_regret(0, {'RB': 0, 'WR': 0, 'QB': 0, 'TE': 0}); print(f'Regret analysis found {len(regret)} positions'); assert len(regret) >= 2, 'Should analyze multiple positions'; assert all('regret_pct' in r for r in regret), 'Should have regret percentages'; print('✓ Regret analysis working')\"",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "cliff-windows-analysis",
      "type": "custom",
      "description": "Verify time-to-cliff analysis detects value dropoffs for position-based decision timing",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python -c \"from scripts.dp_draft_optimizer_debug import compute_cliff_windows, load_and_merge_data, monte_carlo_survival_realistic, get_position_survival_matrix; import numpy as np; np.random.seed(42); players = load_and_merge_data(); player_survival = monte_carlo_survival_realistic(players, 1000, export_simulation_data=False, data_source='espn', enhanced_stats=False); globals().update({'PLAYERS': players, 'SURVIVAL_PROBS': get_position_survival_matrix(players, player_survival)}); cliffs = compute_cliff_windows(0, {'RB': 0, 'WR': 0, 'QB': 0, 'TE': 0}); print(f'Cliff analysis for {len(cliffs)} positions'); assert isinstance(cliffs, dict), 'Should return dictionary'; print('✓ Cliff windows analysis working')\"",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "flexibility-index-calculation",
      "type": "custom",
      "description": "Verify flexibility index computes entropy-based decision flexibility scores between 0.0 and 1.0",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python -c \"from scripts.dp_draft_optimizer_debug import compute_flexibility_index; test_vals = {'RB': {'total_value': 100}, 'WR': {'total_value': 95}, 'QB': {'total_value': 85}}; flex = compute_flexibility_index(test_vals); print(f'Flexibility index: {flex}'); assert 0 <= flex <= 1, f'Should be 0-1, got {flex}'; flex_equal = compute_flexibility_index({'RB': {'total_value': 100}, 'WR': {'total_value': 100}}); assert flex_equal == 1.0, 'Equal values should give max flexibility'; print('✓ Flexibility index working')\"",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "contingency-playbooks-generation",
      "type": "custom",
      "description": "Verify contingency playbooks generate primary/secondary/tertiary recommendations for draft scenarios",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python -c \"from scripts.dp_draft_optimizer_debug import build_contingency_tree, load_and_merge_data, monte_carlo_survival_realistic, get_position_survival_matrix; import numpy as np; np.random.seed(42); players = load_and_merge_data(); player_survival = monte_carlo_survival_realistic(players, 1000, export_simulation_data=False, data_source='espn', enhanced_stats=False); globals().update({'PLAYERS': players, 'SURVIVAL_PROBS': get_position_survival_matrix(players, player_survival)}); tree = build_contingency_tree(0, {'RB': 0, 'WR': 0, 'QB': 0, 'TE': 0}); print(f'Contingency tree keys: {list(tree.keys())}'); assert 'primary' in tree and 'secondary' in tree and 'tertiary' in tree, 'Should have primary/secondary/tertiary options'; print('✓ Contingency playbooks working')\"",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "analytics-data-capture-validation",
      "type": "custom",
      "description": "Verify analytics data capture exports pick candidates, value decay, and positional outlook when enabled",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python scripts/dp_draft_optimizer_debug.py --mode fast --seed 42 --capture-analytics && test -f data/output-simulations/pick_candidates.csv && test -f data/output-simulations/value_decay.csv && test -f data/output-simulations/pos_outlook.csv && test -f data/output-simulations/run_metadata.json",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "envelope-projections-support",
      "type": "custom",
      "description": "Verify envelope projections integration works when envelope file is provided for uncertainty analysis",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python -c \"from scripts.dp_draft_optimizer_debug import _load_envelopes; import pandas as pd; test_df = pd.DataFrame({'name': ['Player A'], 'pos': ['RB'], 'low': [100], 'proj': [120], 'high': [140]}); test_df.to_csv('/tmp/test_envelope.csv', index=False); result = _load_envelopes('/tmp/test_envelope.csv'); print(f'Loaded envelope data: {len(result)} players'); assert len(result) > 0, 'Should load envelope data'; print('✓ Envelope projections support working')\"",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "architectural-constraints-compliance", 
      "type": "static",
      "description": "Verify main optimizer script remains unified (single file architecture) with enhanced features integrated",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && test $(wc -l < scripts/dp_draft_optimizer_debug.py) -gt 2500 && test $(find scripts/ -name '*.py' -not -path 'scripts/tests/*' | wc -l) -eq 1",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "required-data-files-exist",
      "type": "static",
      "description": "Verify all required data files exist for both ESPN algorithms and rankings",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && test -f data/probability-models-draft/espn_algorithm_20250824.csv && test -f data/probability-models-draft/espn_projections_20250814.csv && test -f data/rankings_top300_20250814.csv && test -f data/probability-models-draft/realtime_adp_20250822.csv && test -f data/probability-models-draft/actual_draft_results_20250823.csv",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "project-structure-validation",
      "type": "static", 
      "description": "Verify complete project structure with enhanced features documentation and test infrastructure",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && test -f scripts/dp_draft_optimizer_debug.py && test -d scripts/tests && test -f scripts/tests/test_golden_master.py && test -f scripts/tests/test_optimizer.py && test -d jupyter-notebooks && test -f requirements.txt && test -f CLAUDE.md && test -f README.md && test -d specs && test -d tests/golden",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "enhanced-documentation-validation",
      "type": "static",
      "description": "Verify CLAUDE.md contains enhanced decision support documentation and command examples",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && grep -q \"Enhanced Decision Support\" CLAUDE.md && grep -q \"ε-Optimal Plans\" CLAUDE.md && grep -q \"Regret Analysis\" CLAUDE.md && grep -q \"Flexibility Index\" CLAUDE.md && grep -q \"Contingency\" CLAUDE.md",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "python-dependencies-validation",
      "type": "custom",
      "description": "Verify all Python dependencies are available and importable for enhanced features",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python -c \"import pandas, numpy, matplotlib, seaborn, scipy, rapidfuzz; print('All dependencies imported successfully')\"",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "favorites-functionality-preserved", 
      "type": "unit",
      "description": "Verify favorites loading functionality remains intact with enhanced features",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python scripts/tests/test_favorites.py",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "export-format-support-validation",
      "type": "custom",
      "description": "Verify both CSV and Parquet export formats work for analytics data",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && python -c \"import pandas as pd; df = pd.DataFrame({'test': [1,2,3]}); df.to_csv('/tmp/test.csv'); df.to_parquet('/tmp/test.parquet'); print('Both CSV and Parquet export supported')\"",
      "expect": {
        "exitCode": 0
      }
    },
    {
      "id": "debug-mode-enhanced-output-validation",
      "type": "custom",
      "description": "Verify debug mode shows enhanced analysis with all decision support features",
      "command": "cd /Users/ben/projects/fantasy-draft-feature/dpscript-insights && timeout 60 python scripts/dp_draft_optimizer_debug.py --mode debug --sims 50 --seed 42 | grep -E \"PLAN MENU|Regret Analysis|Flexibility Index|CONTINGENCY\"",
      "expect": {
        "exitCode": 0
      }
    }
  ],
  "policy": {
    "risk_level": "medium",
    "auto_merge_if_low_risk": false,
    "migration_requires_manual_approval": true
  }
}